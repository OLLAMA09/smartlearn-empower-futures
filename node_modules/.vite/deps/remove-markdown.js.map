{
  "version": 3,
  "sources": ["../../remove-markdown/index.js"],
  "sourcesContent": ["module.exports = function(md, options) {\r\n  options = options || {};\r\n  options.listUnicodeChar = options.hasOwnProperty('listUnicodeChar') ? options.listUnicodeChar : false;\r\n  options.stripListLeaders = options.hasOwnProperty('stripListLeaders') ? options.stripListLeaders : true;\r\n  options.gfm = options.hasOwnProperty('gfm') ? options.gfm : true;\r\n  options.useImgAltText = options.hasOwnProperty('useImgAltText') ? options.useImgAltText : true;\r\n  options.abbr = options.hasOwnProperty('abbr') ? options.abbr : false;\r\n  options.replaceLinksWithURL = options.hasOwnProperty('replaceLinksWithURL') ? options.replaceLinksWithURL : false;\r\n  options.htmlTagsToSkip = options.hasOwnProperty('htmlTagsToSkip') ? options.htmlTagsToSkip : [];\r\n  options.throwError = options.hasOwnProperty('throwError') ? options.throwError : false;\r\n\r\n  var output = md || '';\r\n\r\n  // Remove horizontal rules (stripListHeaders conflict with this rule, which is why it has been moved to the top)\r\n  output = output.replace(/^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/gm, '');\r\n\r\n  try {\r\n    if (options.stripListLeaders) {\r\n      if (options.listUnicodeChar)\r\n        output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+/gm, options.listUnicodeChar + ' $1');\r\n      else\r\n        output = output.replace(/^([\\s\\t]*)([\\*\\-\\+]|\\d+\\.)\\s+/gm, '$1');\r\n    }\r\n    if (options.gfm) {\r\n      output = output\r\n      // Header\r\n        .replace(/\\n={2,}/g, '\\n')\r\n        // Fenced codeblocks\r\n        .replace(/~{3}.*\\n/g, '')\r\n        // Strikethrough\r\n        .replace(/~~/g, '')\r\n        // Fenced codeblocks with backticks\r\n        .replace(/```(?:.*)\\n([\\s\\S]*?)```/g, (_, code) => code.trim());\r\n    }\r\n    if (options.abbr) {\r\n      // Remove abbreviations\r\n      output = output.replace(/\\*\\[.*\\]:.*\\n/, '');\r\n    }\r\n    \r\n    let htmlReplaceRegex = /<[^>]*>/g\r\n    if (options.htmlTagsToSkip && options.htmlTagsToSkip.length > 0) {\r\n      // Create a regex that matches tags not in htmlTagsToSkip\r\n      const joinedHtmlTagsToSkip = options.htmlTagsToSkip.join('|')\r\n      htmlReplaceRegex = new RegExp(\r\n        `<(?!\\/?(${joinedHtmlTagsToSkip})(?=>|\\s[^>]*>))[^>]*>`,\r\n        'g',\r\n      )\r\n    }\r\n\r\n    output = output\r\n      // Remove HTML tags\r\n      .replace(htmlReplaceRegex, '')\r\n      // Remove setext-style headers\r\n      .replace(/^[=\\-]{2,}\\s*$/g, '')\r\n      // Remove footnotes?\r\n      .replace(/\\[\\^.+?\\](\\: .*?$)?/g, '')\r\n      .replace(/\\s{0,2}\\[.*?\\]: .*?$/g, '')\r\n      // Remove images\r\n      .replace(/\\!\\[(.*?)\\][\\[\\(].*?[\\]\\)]/g, options.useImgAltText ? '$1' : '')\r\n      // Remove inline links\r\n      .replace(/\\[([\\s\\S]*?)\\]\\s*[\\(\\[].*?[\\)\\]]/g, options.replaceLinksWithURL ? '$2' : '$1')\r\n      // Remove blockquotes\r\n      .replace(/^(\\n)?\\s{0,3}>\\s?/gm, '$1')\r\n      // .replace(/(^|\\n)\\s{0,3}>\\s?/g, '\\n\\n')\r\n      // Remove reference-style links?\r\n      .replace(/^\\s{1,2}\\[(.*?)\\]: (\\S+)( \".*?\")?\\s*$/g, '')\r\n      // Remove atx-style headers\r\n      .replace(/^(\\n)?\\s{0,}#{1,6}\\s*( (.+))? +#+$|^(\\n)?\\s{0,}#{1,6}\\s*( (.+))?$/gm, '$1$3$4$6')\r\n      // Remove * emphasis\r\n      .replace(/([\\*]+)(\\S)(.*?\\S)??\\1/g, '$2$3')\r\n      // Remove _ emphasis. Unlike *, _ emphasis gets rendered only if \r\n      //   1. Either there is a whitespace character before opening _ and after closing _.\r\n      //   2. Or _ is at the start/end of the string.\r\n      .replace(/(^|\\W)([_]+)(\\S)(.*?\\S)??\\2($|\\W)/g, '$1$3$4$5')\r\n      // Remove single-line code blocks (already handled multiline above in gfm section)\r\n      .replace(/(`{3,})(.*?)\\1/gm, '$2')\r\n      // Remove inline code\r\n      .replace(/`(.+?)`/g, '$1')\r\n      // // Replace two or more newlines with exactly two? Not entirely sure this belongs here...\r\n      // .replace(/\\n{2,}/g, '\\n\\n')\r\n      // // Remove newlines in a paragraph\r\n      // .replace(/(\\S+)\\n\\s*(\\S+)/g, '$1 $2')\r\n      // Replace strike through\r\n      .replace(/~(.*?)~/g, '$1');\r\n  } catch(e) {\r\n    if (options.throwError) throw e;\r\n\r\n    console.error(\"remove-markdown encountered error: %s\", e);\r\n    return md;\r\n  }\r\n  return output;\r\n};\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAAA,WAAO,UAAU,SAAS,IAAI,SAAS;AACrC,gBAAU,WAAW,CAAC;AACtB,cAAQ,kBAAkB,QAAQ,eAAe,iBAAiB,IAAI,QAAQ,kBAAkB;AAChG,cAAQ,mBAAmB,QAAQ,eAAe,kBAAkB,IAAI,QAAQ,mBAAmB;AACnG,cAAQ,MAAM,QAAQ,eAAe,KAAK,IAAI,QAAQ,MAAM;AAC5D,cAAQ,gBAAgB,QAAQ,eAAe,eAAe,IAAI,QAAQ,gBAAgB;AAC1F,cAAQ,OAAO,QAAQ,eAAe,MAAM,IAAI,QAAQ,OAAO;AAC/D,cAAQ,sBAAsB,QAAQ,eAAe,qBAAqB,IAAI,QAAQ,sBAAsB;AAC5G,cAAQ,iBAAiB,QAAQ,eAAe,gBAAgB,IAAI,QAAQ,iBAAiB,CAAC;AAC9F,cAAQ,aAAa,QAAQ,eAAe,YAAY,IAAI,QAAQ,aAAa;AAEjF,UAAI,SAAS,MAAM;AAGnB,eAAS,OAAO,QAAQ,wEAAwE,EAAE;AAElG,UAAI;AACF,YAAI,QAAQ,kBAAkB;AAC5B,cAAI,QAAQ;AACV,qBAAS,OAAO,QAAQ,mCAAmC,QAAQ,kBAAkB,KAAK;AAAA;AAE1F,qBAAS,OAAO,QAAQ,mCAAmC,IAAI;AAAA,QACnE;AACA,YAAI,QAAQ,KAAK;AACf,mBAAS,OAEN,QAAQ,YAAY,IAAI,EAExB,QAAQ,aAAa,EAAE,EAEvB,QAAQ,OAAO,EAAE,EAEjB,QAAQ,6BAA6B,CAAC,GAAG,SAAS,KAAK,KAAK,CAAC;AAAA,QAClE;AACA,YAAI,QAAQ,MAAM;AAEhB,mBAAS,OAAO,QAAQ,iBAAiB,EAAE;AAAA,QAC7C;AAEA,YAAI,mBAAmB;AACvB,YAAI,QAAQ,kBAAkB,QAAQ,eAAe,SAAS,GAAG;AAE/D,gBAAM,uBAAuB,QAAQ,eAAe,KAAK,GAAG;AAC5D,6BAAmB,IAAI;AAAA,YACrB,UAAW,oBAAoB;AAAA,YAC/B;AAAA,UACF;AAAA,QACF;AAEA,iBAAS,OAEN,QAAQ,kBAAkB,EAAE,EAE5B,QAAQ,mBAAmB,EAAE,EAE7B,QAAQ,wBAAwB,EAAE,EAClC,QAAQ,yBAAyB,EAAE,EAEnC,QAAQ,+BAA+B,QAAQ,gBAAgB,OAAO,EAAE,EAExE,QAAQ,qCAAqC,QAAQ,sBAAsB,OAAO,IAAI,EAEtF,QAAQ,uBAAuB,IAAI,EAGnC,QAAQ,0CAA0C,EAAE,EAEpD,QAAQ,uEAAuE,UAAU,EAEzF,QAAQ,2BAA2B,MAAM,EAIzC,QAAQ,sCAAsC,UAAU,EAExD,QAAQ,oBAAoB,IAAI,EAEhC,QAAQ,YAAY,IAAI,EAMxB,QAAQ,YAAY,IAAI;AAAA,MAC7B,SAAQ,GAAG;AACT,YAAI,QAAQ,WAAY,OAAM;AAE9B,gBAAQ,MAAM,yCAAyC,CAAC;AACxD,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT;AAAA;AAAA;",
  "names": []
}
